<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Winforms</name>
    </assembly>
    <members>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionChangedToListChangedTransformer.AsListChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Transforms a NotifyCollectionChangedEventArgs into zero or more ListChangedEventArgs
            </summary>
            <param name="ea"></param>
            <returns></returns>
        </member>
        <member name="T:ReactiveUI.Winforms.IReactiveDerivedBindingList`1">
            <summary>
            IReactiveDerivedList represents a bindinglist whose contents will "follow" another
            collection; this method is useful for creating ViewModel collections
            that are automatically updated when the respective Model collection is updated.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionMixin.CreateDerivedBindingList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.Func{``0,System.Boolean},System.Func{``1,``1,System.Int32},System.IObservable{``2})">
             <summary>
             Creates a collection whose contents will "follow" another
             collection; this method is useful for creating ViewModel collections
             that are automatically updated when the respective Model collection
             is updated.
            
             Note that even though this method attaches itself to any 
             IEnumerable, it will only detect changes from objects implementing
             INotifyCollectionChanged (like ReactiveList). If your source
             collection doesn't implement this, signalReset is the way to signal
             the derived collection to reorder/refilter itself.
             </summary>
             <param name="selector">A Select function that will be run on each
             item.</param>
             <param name="onRemoved">An action that is called on each item when
             it is removed.</param>
             <param name="filter">A filter to determine whether to exclude items 
             in the derived collection.</param>
             <param name="orderer">A comparator method to determine the ordering of
             the resulting collection.</param>
             <param name="signalReset">When this Observable is signalled, 
             the derived collection will be manually 
             reordered/refiltered.</param>
             <returns>A new collection whose items are equivalent to
             Collection.Select().Where().OrderBy() and will mirror changes 
             in the initial collection.</returns>
        </member>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionMixin.CreateDerivedBindingList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Boolean},System.Func{``1,``1,System.Int32},System.IObservable{``2})">
             <summary>
             Creates a collection whose contents will "follow" another
             collection; this method is useful for creating ViewModel collections
             that are automatically updated when the respective Model collection
             is updated.
            
             Note that even though this method attaches itself to any 
             IEnumerable, it will only detect changes from objects implementing
             INotifyCollectionChanged (like ReactiveList). If your source
             collection doesn't implement this, signalReset is the way to signal
             the derived collection to reorder/refilter itself.
             </summary>
             <param name="selector">A Select function that will be run on each
             item.</param>
             <param name="filter">A filter to determine whether to exclude items 
             in the derived collection.</param>
             <param name="orderer">A comparator method to determine the ordering of
             the resulting collection.</param>
             <param name="signalReset">When this Observable is signalled, 
             the derived collection will be manually 
             reordered/refiltered.</param>
             <returns>A new collection whose items are equivalent to
             Collection.Select().Where().OrderBy() and will mirror changes 
             in the initial collection.</returns>
        </member>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionMixin.CreateDerivedBindingList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.Func{``0,System.Boolean},System.Func{``1,``1,System.Int32})">
            <summary>
            Creates a collection whose contents will "follow" another
            collection; this method is useful for creating ViewModel collections
            that are automatically updated when the respective Model collection
            is updated.
            
            Be aware that this overload will result in a collection that *only* 
            updates if the source implements INotifyCollectionChanged. If your
            list changes but isn't a ReactiveList/ObservableCollection,
            you probably want to use the other overload.
            </summary>
            <param name="selector">A Select function that will be run on each
            item.</param>
            /// <param name="onRemoved">An action that is called on each item when
            it is removed.</param>
            <param name="filter">A filter to determine whether to exclude items 
            in the derived collection.</param>
            <param name="orderer">A comparator method to determine the ordering of
            the resulting collection.</param>
            <returns>A new collection whose items are equivalent to
            Collection.Select().Where().OrderBy() and will mirror changes 
            in the initial collection.</returns>
        </member>
        <member name="M:ReactiveUI.Winforms.ObservableCollectionMixin.CreateDerivedBindingList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Boolean},System.Func{``1,``1,System.Int32})">
            <summary>
            Creates a collection whose contents will "follow" another
            collection; this method is useful for creating ViewModel collections
            that are automatically updated when the respective Model collection
            is updated.
            
            Be aware that this overload will result in a collection that *only* 
            updates if the source implements INotifyCollectionChanged. If your
            list changes but isn't a ReactiveList/ObservableCollection,
            you probably want to use the other overload.
            </summary>
            <param name="selector">A Select function that will be run on each
            item.</param>
            <param name="filter">A filter to determine whether to exclude items 
            in the derived collection.</param>
            <param name="orderer">A comparator method to determine the ordering of
            the resulting collection.</param>
            <returns>A new collection whose items are equivalent to
            Collection.Select().Where().OrderBy() and will mirror changes 
            in the initial collection.</returns>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.Dispose(System.Boolean)">
            <summary>
                Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:ReactiveUI.Winforms.RoutedControlHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.RoutedControlHost.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ReactiveBindingList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            ReactiveBindingList constructor
            </summary>
            <param name="items"></param>
        </member>
        <member name="T:ReactiveUI.Winforms.CreatesWinformsCommandBinding">
            <summary>
            This binder is the default binder for connecting to arbitrary events
            </summary>
        </member>
        <member name="T:ReactiveUI.Winforms.Registrations">
            <summary>
            Ignore me. This class is a secret handshake between RxUI and RxUI.Xaml
            in order to register certain classes on startup that would be difficult
            to register otherwise.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.Dispose(System.Boolean)">
            <summary>
                Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:ReactiveUI.Winforms.ViewModelControlHost.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ReactiveUI.Winforms.ViewModelControlHost.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
